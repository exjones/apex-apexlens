CREATE TABLE  "AL_CONTROLS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(1000), 
	"JAVASCRIPT_CODE" CLOB, 
	 CONSTRAINT "AL_CONTROLS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "AL_CONTROLS_UK1" UNIQUE ("NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "AL_CONTROL_RESOURCES" 
   (	"CONTROL_ID" NUMBER NOT NULL ENABLE, 
	"FILE_NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"MIME_TYPE" VARCHAR2(100) NOT NULL ENABLE, 
	"BLOB_CONTENT" BLOB, 
	 CONSTRAINT "AL_CONTROL_RESOURCES_PK" PRIMARY KEY ("CONTROL_ID", "FILE_NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "AL_LENSES" 
   (	"UUID" VARCHAR2(40) NOT NULL ENABLE, 
	"NAME" VARCHAR2(100) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(1000), 
	"SMOOTH_POSITION" NUMBER, 
	"SMOOTH_ROTATION" NUMBER, 
	"SMOOTH_SCALE" NUMBER, 
	"LIGHT_COLOR" VARCHAR2(20), 
	"LIGHT_INTENSITY" NUMBER, 
	"LIGHT_X" NUMBER, 
	"LIGHT_Y" NUMBER, 
	"LIGHT_Z" NUMBER, 
	"AMBIENT_COLOR" VARCHAR2(20), 
	"DETECTION_WIDTH" NUMBER, 
	"DETECTION_HEIGHT" NUMBER, 
	"DISPLAY_STATS" VARCHAR2(1), 
	 CONSTRAINT "AL_LENSES_PK" PRIMARY KEY ("UUID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "AL_LENSES_UK1" UNIQUE ("NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "AL_LENS_CONTROLS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"LENS_UUID" VARCHAR2(40) NOT NULL ENABLE, 
	"CONTROL_ID" NUMBER NOT NULL ENABLE, 
	"MARKER_NUMBER" NUMBER NOT NULL ENABLE, 
	"JSON_CONFIG" VARCHAR2(4000), 
	 CONSTRAINT "AL_LENS_CONTROLS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "AL_LENS_CONTROLS_UK1" UNIQUE ("LENS_UUID", "MARKER_NUMBER")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "AL_POSTED_DATA" 
   (	"TIME_STAMP" NUMBER NOT NULL ENABLE, 
	"LENS_UUID" VARCHAR2(40) NOT NULL ENABLE, 
	"MARKER_NUMBER" NUMBER NOT NULL ENABLE, 
	"JSON_PAYLOAD" CLOB, 
	 CONSTRAINT "ENSURE_JSON" CHECK (json_payload is json) ENABLE
   )
/
CREATE TABLE  "AL_STATIC_FILES" 
   (	"FILE_NAME" VARCHAR2(1000) NOT NULL ENABLE, 
	"MIME_TYPE" VARCHAR2(100) NOT NULL ENABLE, 
	"FILE_CONTENT" BLOB, 
	"DIRECTORY_NAME" VARCHAR2(100), 
	 CONSTRAINT "AL_STATIC_FILES_PK" PRIMARY KEY ("FILE_NAME")
  USING INDEX  ENABLE
   )
/
CREATE TABLE  "AL_SETTINGS" 
   (	"NAME" VARCHAR2(30) NOT NULL ENABLE, 
	"VALUE" VARCHAR2(1000), 
	 CONSTRAINT "AL_SETTINGS_PK" PRIMARY KEY ("NAME")
  USING INDEX  ENABLE
   )
/
ALTER TABLE  "AL_LENS_CONTROLS" ADD CONSTRAINT "AL_LENS_CONTROLS_FK1" FOREIGN KEY ("LENS_UUID")
	  REFERENCES  "AL_LENSES" ("UUID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "AL_LENS_CONTROLS" ADD CONSTRAINT "AL_LENS_CONTROLS_FK2" FOREIGN KEY ("CONTROL_ID")
	  REFERENCES  "AL_CONTROLS" ("ID") ENABLE
/
ALTER TABLE  "AL_CONTROL_RESOURCES" ADD CONSTRAINT "AL_CONTROL_RESOURCES_FK" FOREIGN KEY ("CONTROL_ID")
	  REFERENCES  "AL_CONTROLS" ("ID") ON DELETE CASCADE ENABLE
/
ALTER TABLE  "AL_POSTED_DATA" ADD CONSTRAINT "AL_POSTED_DATA_FK" FOREIGN KEY ("LENS_UUID")
	  REFERENCES  "AL_LENSES" ("UUID") ON DELETE CASCADE ENABLE
/
CREATE OR REPLACE EDITIONABLE PACKAGE  "AL_DATA" as
--
  procedure post(p_uuid in varchar2,p_marker in number,p_body in blob);
  procedure get(p_uuid in varchar2,p_since in number);  
--
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "AL_DATA" as
--
  g_TIME_FORMAT constant varchar2(40) := 'YYYYMMDDHH24MISS.FF';
--
  procedure post(p_uuid in varchar2,p_marker in number,p_body blob) is
    l_time_stamp number;
    l_raw_body blob;
    l_json_payload clob;
    l_count number;
  begin
    apex_json.open_object;
    begin
      -- Self-healing; delete anything older than 24 hours
      l_time_stamp := to_number(to_char(systimestamp,g_TIME_FORMAT));
      delete from al_posted_data
      where time_stamp < (l_time_stamp - (60 * 60 * 24));
      --
      -- Make sure a valid lens and marker are being targetted
      select count(*)
      into l_count
      from al_lens_controls
      where lens_uuid = p_uuid
      and marker_number = p_marker;
      --
      if l_count > 0 then
        l_raw_body := p_body;
        l_json_payload := wwv_flow_utilities.blob_to_clob(l_raw_body);
        --
        -- Check that the payload's not too big
        if dbms_lob.getLength(l_json_payload) >= 32767 then
          apex_json.write('message','Payload is too large, limit is 32KB');
        else
          --
          -- Remember the data, so the client can retrieve it
          insert into al_posted_data(time_stamp,lens_uuid,marker_number,json_payload)
          values(l_time_stamp,p_uuid,p_marker,l_json_payload);
          --
          apex_json.write('inserted',sql%rowcount);
          apex_json.write('time_stamp',l_time_stamp);
          apex_json.write('lens_uuid',p_uuid);
          apex_json.write('marker_number',p_marker);
          apex_json.write('payload_size',dbms_lob.getLength(l_json_payload));
        end if;
      else
        apex_json.write('message','Invalid combination of lens and marker');
      end if;
    exception 
      when others then
        apex_json.write('sqlerrm',sqlerrm);
      --
    end;
    apex_json.close_all;
  end;
--
  procedure get(p_uuid in varchar2,p_since in number) is
    l_start_time number;
    l_timeout number;
    l_sleep number;
    l_count number := 0;
    l_earliest_time number := 20180101000000.00;
    l_latest_time number := to_number(to_char(systimestamp,g_TIME_FORMAT));
  begin
    apex_json.open_object;
    begin
      -- Don't send any data back if this is the first time we've asked for new messages
      -- Just send the current time, so we can get any new data since we last asked
      l_start_time := to_number(to_char(systimestamp,g_TIME_FORMAT));
      if p_since is not null and p_since > l_earliest_time then
        --
        -- Wait until we've found some new data
        l_timeout := to_number(al_setting.get_value('DATA_TIMEOUT'));
        l_sleep := to_number(al_setting.get_value('SLEEP_MS'));
        while to_number(to_char(systimestamp,g_TIME_FORMAT)) < l_start_time + l_timeout loop
          select count(*)
          into l_count 
          from al_posted_data
          where time_stamp > p_since
          and lens_uuid = p_uuid;
          --
          if l_count <= 0 then
            al_utl.sleep(l_sleep);
          else
            exit;
          end if;
        end loop;
        --
        -- Send back new data if there is any, otherwise we timed out, so the client needs to initiate a new request
        if l_count > 0 then
          apex_json.open_array('new_data');
          for d in (
            select time_stamp,marker_number,json_payload
            from al_posted_data
            where time_stamp > p_since
            and lens_uuid = p_uuid
            order by time_stamp asc
          ) loop
            apex_json.open_object;
              apex_json.write('time_stamp',to_char(d.time_stamp));
              apex_json.write('marker_number',d.marker_number);
              apex_json.write('json_payload',d.json_payload);
            apex_json.close_object;
            --
            l_latest_time := greatest(l_latest_time,d.time_stamp);
          end loop;
          apex_json.close_array;
        else
          apex_json.write('message','Request for new data timed out');
          l_latest_time := to_number(to_char(systimestamp,g_TIME_FORMAT)); -- Latest time has now progressed a bit, 'cos we waited
        end if;
      end if;
      --
      -- Return the current time, so we can ask for new data since then
      apex_json.write('current_time',to_char(l_latest_time));
    exception 
      when others then
        apex_json.write('sqlerrm',sqlerrm);
      --
    end;
    apex_json.close_all;
  end;  
--
end;
/

CREATE OR REPLACE EDITIONABLE PACKAGE  "AL_LOG" as
--
  procedure prn(p_msg in varchar2);
--
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "AL_LOG" as
--
  procedure prn(p_msg in varchar2) is
  begin
    dbms_output.put_line(p_msg);
  end;
--
end;
/

CREATE OR REPLACE EDITIONABLE PACKAGE  "AL_RENDER" as
--
  procedure install;
  procedure manifest;
  procedure viewer(p_uuid in varchar2,p_session_id in number);
--
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "AL_RENDER" as
--
  procedure install is
  begin
    htp.htmlOpen;
      htp.headOpen;
        htp.title('Apex Lens - Install');
        htp.p('<link rel="manifest" href="manifest">');
      htp.headClose;
      htp.bodyOpen;
        htp.p('From the browser menu select Add to Home Screen');
      htp.bodyClose;
    htp.htmlClose;
  end;
--
  procedure manifest is
  begin
    owa_util.mime_header('application/json');
    apex_json.open_object;
    --
    apex_json.write('name','Apex Lens - Viewer');
    apex_json.write('short_name','Apex Lens');
    apex_json.write('start_url',al_setting.get_value('START_URL'));
    apex_json.write('display','fullscreen');
    apex_json.write('background_color','#ddf');
    apex_json.write('description','An APEX Viewer for AR Scenes');
    apex_json.write('orientation','landscape');
    --
    apex_json.open_array('icons');
    --
    apex_json.open_object;
    apex_json.write('src','static/Search-icon-32x32.png');
    apex_json.write('sizes','32x32');
    apex_json.write('type','image/png');
    apex_json.close_object;
    --
    apex_json.open_object;
    apex_json.write('src','static/Search-icon-48x48.png');
    apex_json.write('sizes','48x48');
    apex_json.write('type','image/png');
    apex_json.close_object;
    --
    apex_json.open_object;
    apex_json.write('src','static/Search-icon-64x64.png');
    apex_json.write('sizes','64x64');
    apex_json.write('type','image/png');
    apex_json.close_object;
    --
    apex_json.open_object;
    apex_json.write('src','static/Search-icon-128x128.png');
    apex_json.write('sizes','128x128');
    apex_json.write('type','image/png');
    apex_json.close_object;
    --
    apex_json.close_array;
    --
    apex_json.close_all;
  end;
--
  procedure marker_control(p_lens_uuid in varchar2,p_id in number,p_control_id in number,p_marker_number in number,p_json_config in varchar2) is
    l_name varchar2 (100);
    l_description varchar2(1000);
    l_javascript_code clob;
  begin
    begin
      select name,description,javascript_code
      into l_name,l_description,l_javascript_code
      from al_controls
      where id = p_control_id;
    exception
      when others then
        htp.p('/* Error rendering control '||p_control_id||' for lens '||p_lens_uuid||': '||sqlerrm||' */');
        return;
      --
    end;
    --
    -- Add the configured marker's objects to this control's node
    htp.prn('new AL.MarkerControl('||p_marker_number||',');
    al_utl.write_clob(al_utl.replace_in_clob(l_javascript_code,'#CTRL_RESOURCES#',al_setting.get_value('REST_URL')||'/r/'||p_control_id||'/'));
    htp.p(','||nvl(p_json_config,'{}')||');');
  end;
--
  procedure viewer(p_uuid in varchar2,p_session_id in number) is
    l_name varchar2(100);
    l_description varchar2(1000);
    l_smooth_position number;
    l_smooth_rotation number;
    l_smooth_scale number;
    l_light_color varchar2(20);
    l_light_intensity number;
    l_light_x number;
    l_light_y number;
    l_light_z number;
    l_ambient_color varchar2(20);
    l_detection_width number;
    l_detection_height number;
    l_display_stats varchar2(1);
  begin
    begin
      select name,
             description,
             smooth_position,
             smooth_rotation,
             smooth_scale,
             light_color,
             light_intensity,
             light_x,
             light_y,
             light_z,
             ambient_color,
             detection_width,
             detection_height,
             display_stats
      into l_name,
           l_description,
           l_smooth_position,
           l_smooth_rotation,
           l_smooth_scale,
           l_light_color,
           l_light_intensity,
           l_light_x,
           l_light_y,
           l_light_z,
           l_ambient_color,
           l_detection_width,
           l_detection_height,
           l_display_stats
      from al_lenses
      where uuid = p_uuid;
    exception
      when no_data_found then
        owa_util.status_line(404,'Lens not found with UUID '||p_uuid);
        return;
      when others then
        owa_util.status_line(500,'Error rendering lens '||p_uuid||'. '||sqlerrm);
        return;
      --
    end;
    --
    htp.htmlOpen;
      htp.headOpen;
        htp.title('Apex Lens - '||l_name);
        htp.p('<!-- '||l_description||' -->');
        htp.p('<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">');
        al_utl.static_javascript('jquery-3.3.1.min.js');
        al_utl.static_javascript('soundjs.min.js');
        al_utl.static_javascript('three-r89.js');
        if l_display_stats = 'Y' then
          al_utl.static_javascript('stats.min.js'); -- Include statistics display, if needed
        end if;
        al_utl.static_javascript('ar.min.js');
        al_utl.static_javascript('inflate.min.js');
        al_utl.static_javascript('FBXLoader.js');
        al_utl.static_javascript('GLTFLoader.js');
        al_utl.static_javascript('ColladaLoader.js');
        htp.p('<script type="text/javascript">THREEx.ArToolkitContext.baseURL = "'||al_setting.get_value('REST_URL')||'/static"</script>');
      htp.headClose;
      htp.bodyOpen(cattributes=>'style="background-color:black;padding:0;margin:0;overflow:hidden;font-family:Monospace;"');
        htp.p('<span onclick="window.location = '''||al_setting.get_value('START_URL')||':1:'||p_session_id||''';" style="left:0;bottom:0;display:block;position:fixed;z-index:100;margin:5px;padding:5px;background:lightGray;color:black;font-size:18px;">&lsaquo;</span>');
        htp.p('<script type="text/javascript">'); 
        htp.p('
          // Global object for our stuff
          window.AL = {
            log: function(msg){console.log(msg);},
            error: function(msg){console.error(msg);},
            resource: function(id,file){return "'||al_setting.get_value('REST_URL')||'/r/"+id+"/"+file;}
          };
              
          // Create some support functionality for registering markers
          AL.MarkerControl = function(marker,config,params){
            this._config = config || {};
            this._marker = marker;
            this._params = params || {};
            AL.log("Creating control for marker "+this._marker);
            
            this.markerRoot = new THREE.Group;
	        AL.scene.add(this.markerRoot)
	        this.artoolkitMarker = new THREEx.ArMarkerControls(AL.toolkitContext, this.markerRoot, {
	          type : "barcode",
              barcodeValue: this._marker
            });

	        // build a smoothedControls
	        this.smoothedRoot = new THREE.Group()
	        AL.scene.add(this.smoothedRoot)
	        this.smoothedControls = new THREEx.ArSmoothedControls(this.smoothedRoot, {
		      lerpPosition: '||l_smooth_position||',
		      lerpQuaternion: '||l_smooth_rotation||',
		      lerpScale: '||l_smooth_scale||',
	        });
              
            // List of registered objects so child updates can find them
            this.objects = [];
             
            // Initialise the configuration object
            if(this._config && this._config.init) this._config.init(this,this._params);
              
            // Add this new object to the list of tracked markers
            AL.registeredMarkerControls.push(this);
          };
          
          AL.MarkerControl.prototype.update = function(dt){
            this.smoothedControls.update(this.markerRoot);
            if(this._config && this._config.update) this._config.update(this,dt);
	      };
      
          AL.MarkerControl.prototype.addObject = function(name,obj){
              
            // If something already exists with the same name, remove it first
            this.removeObject(name);
              
            // Add the new object
            this.objects[name] = obj; 
            this.smoothedRoot.add( obj );
          };
          
          AL.MarkerControl.prototype.findObject= function(name){
            return this.objects[name];
          };
              
          AL.MarkerControl.prototype.removeObject= function(name){
            var obj = this.objects[name];
            if(obj){
              // See; https://github.com/mrdoob/three.js/issues/5175
              // Not sure exactly what of this we need, so check everything!
              this.smoothedRoot.remove(obj);
              if(obj.dispose) obj.dispose();
              if(obj.geometry && obj.geometry.dispose) obj.geometry.dispose();  
              if(obj.material && obj.material.dispose) obj.material.dispose();  
              if(obj.texture && obj.texture.dispose) obj.texture.dispose();  
            }
          };
              
          AL.loadingManager = new THREE.LoadingManager();
              
          AL.onLoadProgress = function( xhr ) {
            if ( xhr.lengthComputable ) {
              var percentComplete = xhr.loaded / xhr.total * 100;
              AL.log( Math.round( percentComplete, 2 ) + "% downloaded" );
            }
          };
              
          AL.onLoadError = function( xhr ) {
            AL.error( xhr );
          }
              
          // Initialise Renderer
	      AL.renderer = new THREE.WebGLRenderer({
            antialias: true,
		    alpha: true
	      });
	      AL.renderer.setClearColor(new THREE.Color("lightgrey"), 0)
          AL.renderer.setPixelRatio(window.devivePixelRatio);
	      AL.renderer.setSize( window.innerWidth, window.innerHeight );
	      AL.renderer.domElement.style.position = "absolute"
	      AL.renderer.domElement.style.top = "0px"
	      AL.renderer.domElement.style.left = "0px"
	      document.body.appendChild( AL.renderer.domElement );

	      // Array of registered marker controls
	      AL.registeredMarkerControls= [];

	      // init scene and camera
	      AL.scene	= new THREE.Scene();
	
	      // Initialize a basic camera
	      AL.camera = new THREE.PerspectiveCamera(75,window.innerWidth/ window.innerHeight);
	      AL.scene.add(AL.camera);
 
          // White directional light shining from the top-right.
          AL.directionalLight = new THREE.DirectionalLight( "'||l_light_color||'", '||l_light_intensity||' );
          AL.directionalLight.position.set('||l_light_x||','||l_light_y||','||l_light_z||');
          AL.scene.add( AL.directionalLight );
          
          // A bit of soft white ambient light
          AL.ambientLight = new THREE.AmbientLight( "'||l_ambient_color||'" ); 
          AL.scene.add( AL.ambientLight );
              
          // Create a source arToolkitSource
	      AL.toolkitSource = new THREEx.ArToolkitSource({
		    sourceType : "webcam",
          });
	      AL.toolkitSource.init(function onReady(){
		    AL.onResize()
	      });
	      window.addEventListener("resize", function(){
		    AL.onResize()
	      });
	      AL.onResize = function(){
		    AL.toolkitSource.onResizeElement()	
		    AL.toolkitSource.copyElementSizeTo(AL.renderer.domElement)	
		    if( AL.toolkitContext.arController !== null ){
			  AL.toolkitSource.copyElementSizeTo(AL.toolkitContext.arController.canvas)	
		    }	
	      }
	
          // For clicking on stuff
          AL.raycaster = new THREE.Raycaster();
          AL.mouse = new THREE.Vector2();
          
          AL.onDocumentMouseDown = function(event){
              event.preventDefault();
              AL.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
              AL.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;
              
              AL.raycaster.setFromCamera(AL.mouse,AL.camera);
              AL.registeredMarkerControls.forEach(function(markerControl){
                var intersects = AL.raycaster.intersectObject(markerControl.smoothedRoot,true);
                if(intersects && intersects.length && markerControl._config.hit) markerControl._config.hit(markerControl,intersects);
              });
              
          }
              
          AL.onDocumentTouchStart = function(event){
              event.preventDefault();
              
              // Kickstart the audio playback, and vibration, on mobiles
              // See; https://createjs.com/docs/soundjs/classes/WebAudioPlugin.html#method_playEmptySound
              createjs.WebAudioPlugin.playEmptySound();
              if ("vibrate" in navigator) navigator.vibrate(1);
              
              event.clientX = event.touches[0].clientX;
              event.clientY = event.touches[0].clientY;
              AL.onDocumentMouseDown(event);
          }
              
          AL.renderer.domElement.addEventListener("mousedown",AL.onDocumentMouseDown,false);
          AL.renderer.domElement.addEventListener("touchstart",AL.onDocumentTouchStart,false);
              
          // Create Toolkit Context
	      AL.toolkitContext = new THREEx.ArToolkitContext({
		    cameraParametersUrl: THREEx.ArToolkitContext.baseURL + "/camera_para.dat",
		    detectionMode: "mono_and_matrix",
            matrixCodeType: "3x3",
		    maxDetectionRate: 30,
		    canvasWidth: '||l_detection_width||',
		    canvasHeight: '||l_detection_height||',
	      });
	      AL.toolkitContext.init(function onCompleted(){
		    AL.camera.projectionMatrix.copy( AL.toolkitContext.getProjectionMatrix() );
	      });          
        ');

        -- Add all the marker controls for this lens 
        for mc in (
          select id,control_id,marker_number,json_config
          from al_lens_controls
          where lens_uuid = p_uuid
          order by marker_number,id
        ) loop
          marker_control(p_uuid,mc.id,mc.control_id,mc.marker_number,mc.json_config);
        end loop;

        htp.p('
	      // Display stats, maybe
          AL.stats = null;
          if(typeof Stats !== "undefined"){
	        AL.stats = new Stats();
	        document.body.appendChild( AL.stats.dom );
          }
	
          AL.lastPollTime = "0";
          AL.pollForData = function(){
            var data_url = "'||al_setting.get_value('REST_URL')||'/data/'||p_uuid||'/"+AL.lastPollTime;
            // AL.log("Getting data from: "+data_url);
            jQuery.getJSON(data_url)
            .done(data => {
              if(data.new_data){
                data.new_data.forEach(function(obj){
                  var json = JSON.parse(obj.json_payload);
                  AL.registeredMarkerControls.forEach(function(markerControl){
                    if(markerControl._config.data && markerControl._marker == obj.marker_number) markerControl._config.data(markerControl,json); 
		          });
                })
              } 
              
              AL.lastPollTime = data.current_time;
              setTimeout(function(){AL.pollForData();},250);
            })
            .fail(err => {
              AL.log("Failed polling for data, trying again");
              setTimeout(function(){AL.pollForData();},5000);
            })
          }
              
          // If we have any markerControls that have data functions, then start polling the server
          var startPolling = false;
          AL.registeredMarkerControls.forEach(function(markerControl){
            if(markerControl._config.data) startPolling = true;
		  });
          if(startPolling) AL.pollForData();    
          else AL.log("No controls are registered to receive data. Cancelling polling.");
              
          // run the rendering loop
	      AL.clock = new THREE.Clock();
	      requestAnimationFrame(function animate(ms){
		    // keep looping
		    requestAnimationFrame( animate );
		    
            // Update artoolkit on every frame
	        if( AL.toolkitSource.ready !== false ) {
              AL.toolkitContext.update( AL.toolkitSource.domElement );
	      
              // Tell each registered marker control to update itself
              var delta = AL.clock.getDelta();
		      AL.registeredMarkerControls.forEach(function(markerControl){
			    markerControl.update(delta);
		      });
            }
              
            // render the scene
	        AL.renderer.render( AL.scene, AL.camera );
		    if(AL.stats) AL.stats.update();  
	      })
        ');
        htp.p('</script>');
      htp.bodyClose;
    htp.htmlClose;
  end;
--
end;
/

CREATE OR REPLACE EDITIONABLE PACKAGE  "AL_SETTING" as
--
  function get_value(p_name in varchar2) return varchar2;
  procedure set_value(p_name in varchar2,p_value in varchar2);
--
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "AL_SETTING" as
--
  function get_value(p_name in varchar2) return varchar2 is
    l_value varchar2(1000);
  begin
    select value
    into l_value
    from al_settings
    where name = p_name;
    --
    return l_value;
  exception
    when no_data_found then return null;
  end;
--
  procedure set_value(p_name in varchar2,p_value in varchar2) is
  begin
    delete from al_settings
    where name = p_name;
    --
    insert into al_settings(name,value)
    values(p_name,p_value);
  end;
--
end;
/

CREATE OR REPLACE EDITIONABLE PACKAGE  "AL_UTL" as
--
  function get_uuid return varchar2;
  procedure update_file(p_file_name in varchar2);
  function get_rest_url return varchar2;
  procedure static_javascript(p_src in varchar2);
  procedure write_clob(p_clob in clob);
  function replace_in_clob(p_original IN CLOB,p_search IN VARCHAR2,p_replace IN varchar2) RETURN CLOB;
  procedure sleep(p_ms in number);
--
end;
/
CREATE OR REPLACE EDITIONABLE PACKAGE BODY  "AL_UTL" as
--
  /*
  Create the associate Java code with;
    create or replace and compile
      java source named "RandomUUID"
      as
      public class RandomUUID
      {
        public static String create()
        {
          return java.util.UUID.randomUUID().toString();
        }
      }
  */
  function get_uuid return varchar2 
  AS LANGUAGE JAVA
  NAME 'RandomUUID.create() return java.lang.String';
--
  procedure update_file(p_file_name in varchar2) is
  begin
    --
    for f in (
        select filename,mime_type,blob_content
        from apex_application_files
        where filename like p_file_name
    ) loop
      delete from al_static_files
      where file_name = f.filename;
      --
      if sql%rowcount > 0 then
        al_log.prn('Deleted existing file: '||f.filename);
      end if;
      --
      insert into al_static_files(file_name,mime_type,file_content)
      values(f.filename,f.mime_type,f.blob_content);
      --
      al_log.prn('Inserted new file: '||f.filename);
    end loop;
  end;
--
  function get_rest_url return varchar2 is
  begin
    return al_setting.get_value('PROTOCOL')||'://'||al_setting.get_value('SERVER_NAME')||':'||al_setting.get_value('PORT_NUMBER')||al_setting.get_value('REST_URL');
  end;
--
  procedure static_javascript(p_src in varchar2) is
  begin
    htp.p('<script type="text/javascript" src="'||al_setting.get_value('REST_URL')||'/static/'||p_src||'"></script>');
  end;
--
  procedure write_clob(p_clob in clob) is
    l_offs number := 1;
    l_chunk number := 1024;
    l_buff varchar2(32767);
  begin
    if p_clob is null then
      return;
    end if;
    --
    while l_offs < dbms_lob.getLength(p_clob) loop
      l_buff := dbms_lob.substr(p_clob,l_chunk,l_offs);
      htp.prn(l_buff);
      --
      l_offs := l_offs + l_chunk;
    end loop;
  end;
--
  function replace_in_clob(p_original IN CLOB,p_search IN VARCHAR2,p_replace IN varchar2) RETURN CLOB
  IS
    v_result        CLOB;
    v_counter       INTEGER := 1;
    v_next          INTEGER;
    v_index         INTEGER := 1;
    v_search_length INTEGER := LENGTH(p_search);
  BEGIN
    IF p_original IS NULL
    THEN
      v_result := NULL;
    ELSIF p_search IS NULL
    THEN
      DBMS_LOB.createtemporary(v_result, TRUE, DBMS_LOB.call);
      DBMS_LOB.COPY(
        v_result,
        p_original,
        DBMS_LOB.lobmaxsize,
        1,
        1
      );
    ELSE
      DBMS_LOB.createtemporary(v_result, TRUE, DBMS_LOB.call);
      LOOP
        v_next := DBMS_LOB.INSTR(p_original,p_search,1,v_counter);
        IF v_next != 0 THEN
          IF (v_next - v_index) > 0 THEN
            DBMS_LOB.COPY(
              v_result,
              p_original,
              v_next - v_index,
              DBMS_LOB.getlength(v_result) + 1,
              v_index
            );
          END IF;
          --
          v_result := v_result || p_replace;
          v_index := v_next + v_search_length;
          v_counter := v_counter + 1;
        END IF;
        EXIT WHEN v_next = 0;
      END LOOP;
      --
      DBMS_LOB.COPY(
        v_result,
        p_original,
        DBMS_LOB.lobmaxsize,
        DBMS_LOB.getlength(v_result) + 1,
        v_index
      );
    END IF;
    --
    RETURN v_result;
  END;
--
  PROCEDURE SLEEP (P_MS IN NUMBER) is 
  LANGUAGE JAVA NAME 'java.lang.Thread.sleep(long)';
--
end;
/

